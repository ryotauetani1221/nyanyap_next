import type { NextPage, GetStaticProps } from 'next'
import Head from 'next/head'
// import Image from 'next/image'
// import styles from '../styles/Home.module.css'
import Script from 'next/script'
import { useRouter } from 'next/router'
import React, { useRef } from 'react';

const Home: NextPage = ({ data }) => {
    const router = useRouter()
    // const { id } = router.query;
    if (router.isFallback) {
        return <div>Loading...</div>;
    }

    const mangaElement = useRef();
    async function MakeImage() {

        // 取得してbase64画像化されたテキストを返す関数
        async function getImageBase64(url) {
            const response = await fetch(url)
            const contentType = response.headers.get('content-type')
            const arrayBuffer = await response.arrayBuffer()
            const APPLY_MAX = 1024
            let encodedStr = ''
            // ArrayBufferの中身を1024バイトに区切って少しずつ文字列にしていく
            for (var i = 0; i < arrayBuffer.byteLength; i += APPLY_MAX) {
                encodedStr += String.fromCharCode.apply(
                    null,
                    new Uint8Array(arrayBuffer.slice(i, i + APPLY_MAX))
                )
            }
            let base64String = btoa(encodedStr)
            return `data:${contentType};base64,${base64String}`
        }

        // console.log(mangaElement.current.querySelector('img'));
        let imgDoms = mangaElement.current.querySelectorAll('img');
        imgDoms.forEach(async (imgDom) => {
            imgDom.src = await getImageBase64(imgDom.src);
            console.log(imgDom.src);
        });
        // imgDom.src = await getImageBase64(imgDom.src);

        // console.log(mangaElement.current);

        html2canvas(mangaElement.current, { allowTaint: true }).then(canvas => {
            mangaElement.current.style.display = 'none';
            document.body.appendChild(canvas);
            console.log(canvas);

            // window.location = canvas;
            // const a = document.createElement("a");
            // console.log(canvas);
            // a.href = canvas.toDataURL();
            // a.download = "sampleData.jpg"; //フォーマットによってファイル拡張子を変えている
            // a.click();
            // a.remove();
        });
    }
    return (
        <div className='container'>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Script src="https://html2canvas.hertzen.com/dist/html2canvas.js" />
            {/* <p>aaa</p> */}
            <button onClick={MakeImage}>
                画像を作る
            </button >
            <div className="">
                <p className="">
                    <b>id:</b>{data.id}
                </p>

                <h3 className='mb-1'>タイトル</h3>
                <h1 className="mt-0">
                    {data.title}
                </h1>
            </div>
            <div ref={mangaElement} className=''>
                {data.manga.map((manga, index) => (
                    <div key={index}>
                        <img src={manga.koma.url} className='border-2 border-zinc-900 mt-5' alt="" />
                    </div>
                ))}
            </div>
        </div >
    )
}

export default Home

export async function getStaticPaths() {
    return {
        paths: [
        ],
        fallback: true
    };
}

import { client } from "../libs/client";

// ビルド時にも呼び出されます。
// export const getStaticProps: GetStaticProps = async params => {
export async function getStaticProps({ params }) {
    if (!params?.id) {
        throw new Error("Error: ID not found");
    }

    try {
        const data = await client.get({
            endpoint: '4koma',
            contentId: params.id,
            // contentId: '6p0kyi5iyy16',
        });

        // 記事データをprops経由でページに渡します。
        return {
            props: {
                data,
            },
        };
    } catch (e) {
        return { notFound: true };
    }


}

// const MakeImageBtn = React.forwardRef(({ }) => {
//     return (
//         <button onClick={() => (alert(11))}>
//             画像を作る
//         </button >
//     );
// })